/*
 * Copyright 2013 Petteri Aimonen <jpa@gfx.mail.kapsi.fi>
 * This file is released to the public domain.
 *
 */

/* Board interface definitions for ED060SC4 PrimeView E-ink panel.
 *
 * You should implement the following functions to define the interface to
 * the panel on your board.
 */

#ifndef _GDISP_LLD_BOARD_H
#define _GDISP_LLD_BOARD_H

#include <hal.h>

/*
 * IO pins assignments.
 */
#define GPIOB_EINK_VDD      0
#define GPIOB_EINK_GMODE    1
#define GPIOB_EINK_SPV      2
#define GPIOB_EINK_CKV      3
#define GPIOB_EINK_CL       4
#define GPIOB_EINK_LE       5
#define GPIOB_EINK_OE       6
#define GPIOB_EINK_SPH      7
#define GPIOB_EINK_D0       8
#define GPIOB_EINK_D1       9
#define GPIOB_EINK_D2       10
#define GPIOB_EINK_D3       11
#define GPIOB_EINK_D4       12
#define GPIOB_EINK_D5       13
#define GPIOB_EINK_D6       14
#define GPIOB_EINK_D7       15

#define GPIOC_SMPS_CTRL     13
#define GPIOC_VPOS_CTRL     14
#define GPIOC_VNEG_CTRL     15



//Set up IO pins for the panel connection.
static inline void init_board(GDisplay *g) {
	// Main SMPS power control, active low
		 // (open collector so that MOSFET gate can be pulled up to Vbat)
		palWritePad(GPIOC, GPIOC_SMPS_CTRL, true);//true
		palSetPadMode(GPIOC, GPIOC_SMPS_CTRL, PAL_MODE_OUTPUT_OPENDRAIN);

		//Power control for the positive & negative side
		palWritePad(GPIOC, GPIOC_VPOS_CTRL, false);
		palSetPadMode(GPIOC, GPIOC_VPOS_CTRL, PAL_MODE_OUTPUT_PUSHPULL);
		palWritePad(GPIOC, GPIOC_VNEG_CTRL, false);
		palSetPadMode(GPIOC, GPIOC_VNEG_CTRL, PAL_MODE_OUTPUT_PUSHPULL);

		// Main data bus
		palWritePort(GPIOB, 0);
		palSetGroupMode(GPIOB, 0xFFFF, 0, PAL_MODE_OUTPUT_PUSHPULL);
}

//Delay for display waveforms. Should be an accurate microsecond delay.
static void eink_delay(int us)
{
	halPolledDelay(US2RTT(us));
}

// Turn the E-ink panel Vdd supply (+3.3V) on or off.
static inline void setpower_vdd(GDisplay *g, bool_t on) {
	palWritePad(GPIOC, GPIOC_SMPS_CTRL, !on);
	palWritePad(GPIOB, GPIOB_EINK_VDD, on);
	/*if (on)
    {
        chSysLock();
        palWritePad(GPIOC, GPIOC_SMPS_CTRL, !on);//
        palSetPadMode(GPIOB, GPIOB_EINK_VDD, PAL_MODE_OUTPUT_PUSHPULL);
        chSysUnlock();
        palWritePad(GPIOB, GPIOB_EINK_VDD, on);
    }
    else
    {
        // Set pin as input to avoid short-circuits in case some IO pin is high.
        chSysLock();
        palWritePad(GPIOC, GPIOC_SMPS_CTRL, !on);//
        palSetPadMode(GPIOB, GPIOB_EINK_VDD, PAL_MODE_INPUT_PULLDOWN);
        chSysUnlock();
        palWritePad(GPIOB, GPIOB_EINK_VDD, on);
    }*/
}

// Turn the E-ink panel negative supplies (-15V, -20V) on or off.
static inline void setpower_vneg(GDisplay *g, bool_t on) {
    palWritePad(GPIOC, GPIOC_SMPS_CTRL, !on);
    palWritePad(GPIOC, GPIOC_VNEG_CTRL, on);
/*
    // Some hackery around the fact that GPIOB0 is not really 5V-tolerant..
    chSysLock();
    if (on)
        palSetPadMode(GPIOC, GPIOC_SMPS_CTRL, PAL_MODE_OUTPUT_OPENDRAIN);
    else
        palSetPadMode(GPIOC, GPIOC_SMPS_CTRL, PAL_MODE_INPUT);
    chSysUnlock();

	palWritePad(GPIOC, GPIOC_VNEG_CTRL, on);*/
}

// Turn the E-ink panel positive supplies (-15V, -20V) on or off.
static inline void setpower_vpos(GDisplay *g, bool_t on) {
	palWritePad(GPIOC, GPIOC_VPOS_CTRL, on);
}

// Set the state of the LE (source driver Latch Enable) pin.
static inline void setpin_le(GDisplay *g, bool_t on) {
	palWritePad(GPIOB, GPIOB_EINK_LE, on);
}

//Set the state of the OE (source driver Output Enable) pin.
static inline void setpin_oe(GDisplay *g, bool_t on) {
	palWritePad(GPIOB, GPIOB_EINK_OE, on);
}

// Set the state of the CL (source driver Clock) pin.
static inline void setpin_cl(GDisplay *g, bool_t on) {
	palWritePad(GPIOB, GPIOB_EINK_CL, on);
}

// Set the state of the SPH (source driver Start Pulse Horizontal) pin.
static inline void setpin_sph(GDisplay *g, bool_t on) {
	palWritePad(GPIOB, GPIOB_EINK_SPH, on);
}

// Set the state of the D0-D7 (source driver Data) pins.
static inline void setpins_data(GDisplay *g, uint8_t value) {
	palWriteGroup(GPIOB, 0xFF, GPIOB_EINK_D0, value);
}

//Set the state of the CKV (gate driver Clock Vertical) pin.
static inline void setpin_ckv(GDisplay *g, bool_t on) {
	palWritePad(GPIOB, GPIOB_EINK_CKV, on);
}

//Set the state of the GMODE (gate driver Gate Mode) pin.
static inline void setpin_gmode(GDisplay *g, bool_t on) {
	palWritePad(GPIOB, GPIOB_EINK_GMODE, on);
}

// Set the state of the SPV (gate driver Start Pulse Vertical) pin.
static inline void setpin_spv(GDisplay *g, bool_t on) {
	palWritePad(GPIOB, GPIOB_EINK_SPV, on);
}

#endif

