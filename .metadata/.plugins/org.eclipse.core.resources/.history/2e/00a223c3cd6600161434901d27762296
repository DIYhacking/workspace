/*
    ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
 * @file    test.c
 * @brief   Tests support code.
 *
 * @addtogroup test
 * @{
 */

#include "ch.h"
#include "hal.h"

#include "test.h"
#include "testsys.h"
#include "testthd.h"
#include "testsem.h"
#include "testmtx.h"
#include "testmsg.h"
#include "testmbox.h"
#include "testevt.h"
#include "testheap.h"
#include "testpools.h"
#include "testdyn.h"
#include "testqueues.h"
#include "testbmk.h"

/*
 * Array of all the test patterns.
 */
static ROMCONST struct testcase * ROMCONST *patterns[] = {
  patternsys,
  patternthd,
  patternsem,
  patternmtx,
  patternmsg,
  patternmbox,
  patternevt,
  patternheap,
  patternpools,
  patterndyn,
  patternqueues,
  patternbmk,
  NULL
};

bool test_global_fail;
static bool local_fail;
static unsigned failpoint;
static char tokens_buffer[MAX_TOKENS];
static char *tokp;

/*Heart Rate*/
volatile int rate[10];                    // array to hold last ten IBI values
volatile unsigned long sampleCounter = 0;          // used to determine pulse timing
volatile unsigned long lastBeatTime = 0;           // used to find IBI
volatile int P =712;//512                      // used to find peak in pulse wave, seeded
volatile int T = 712;                     // used to find trough in pulse wave, seeded
volatile int thresh = 725; //525->5V,725->3V               // used to find instant moment of heart beat, seeded
volatile int amp = 100;                   // used to hold amplitude of pulse waveform, seeded
volatile bool firstBeat = true;        // used to seed rate array so we startup with reasonable BPM
volatile bool secondBeat = false;      // used to seed rate array so we startup with reasonable BPM

volatile int BPM;                   // int that holds raw Analog in 0. updated every 2mS
volatile int Signal;                // holds the incoming raw data
volatile int IBI = 600;             // int that holds the time interval between beats! Must be seeded!
volatile bool Pulse = false;     // "True" when User's live heartbeat is detected. "False" when not a "live beat".
static volatile bool QS = false;        // becomes true when Arduino finds a beat.
volatile int heart;
int intervalN;
int status;
int peak,trough,thrsh,pl;
/*
 * Static working areas, the following areas can be used for threads or
 * used as temporary buffers.
 */
union test_buffers test;

/*
 * Pointers to the spawned threads.
 */
thread_t *threads[MAX_THREADS];

/*
 * Pointers to the working areas.
 */
void * ROMCONST wa[5] = {test.wa.T0, test.wa.T1, test.wa.T2,
                         test.wa.T3, test.wa.T4};

/*
 * Console output.
 */
static BaseSequentialStream *chp;

/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
      chSequentialStreamPut(chp, *--p);
  }
}

/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
}

/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
}

/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
    chSequentialStreamPut(chp, *cp++);
}

/**
 * @brief   Emits a token into the tokens buffer.
 *
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {

  chSysLock();
  *tokp++ = token;
  chSysUnlock();
}

/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
  failpoint = point;
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}

/*
 * Threads utils.
 */

/**
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
      chThdTerminate(threads[i]);
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}

#if CH_DBG_THREADS_PROFILING
/**
 * @brief   CPU pulse.
 * @note    The current implementation is not totally reliable.
 *
 * @param[in] duration      CPU pulse duration in milliseconds
 */
void test_cpu_pulse(unsigned duration) {
  systime_t start, end, now;

  start = chThdGetTicksX(chThdGetSelfX());
  end = start + MS2ST(duration);
  do {
    now = chThdGetTicksX(chThdGetSelfX());
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  }
  while (end > start ? (now >= start) && (now < end) :
                       (now >= start) || (now < end));
}
#endif

/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {

  chThdSleep(1);
  return chVTGetSystemTime();
}

/*
 * Timer utils.
 */

/**
 * @brief   Set to @p TRUE when the test timer reaches its deadline.
 */
bool test_timer_done;

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
}

/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {

  systime_t duration = MS2ST(ms);
  test_timer_done = FALSE;
  chVTSet(&vt, duration, tmr, NULL);
}

/*
 * Test suite execution.
 */
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
    tcp->setup();
  tcp->execute();
  if (tcp->teardown != NULL)
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
}

/**
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
int heartbeat(int adc, int* intervalN, int* status, int* peak,int* trough,int* thrsh,int* pl )
{
	 Signal = adc; // read the Pulse Sensor

	 sampleCounter += 10; //10 //2                       // keep track of the time in mS with this variable

	 int N = sampleCounter - lastBeatTime;       // monitor the time since the last beat to avoid noise

	    //  find the peak and trough of the pulse wave
	  if(Signal < thresh && N > (IBI/5)*3){       // avoid dichrotic noise by waiting 3/5 of last IBI
	    if (Signal < T){                        // T is the trough
	      T = Signal;                         // keep track of lowest point in pulse wave
	    }
	  }

	  if(Signal > thresh && Signal > P){          // thresh condition helps avoid noise
	    P = Signal;                             // P is the peak
	  }                                        // keep track of highest point in pulse wave

	  //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
	  // signal surges up in value every time there is a pulse
	  *intervalN=N;
	  if (N > 250){                                   // avoid high frequency noise
	    if ( (Signal > thresh) && (Pulse == false) && (N > (IBI/5)*3) ){
	      Pulse = true;                               // set the Pulse flag when we think there is a pulse
	      //digitalWrite(blinkPin,HIGH);                // turn on pin 13 LED
	      IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS
	      lastBeatTime = sampleCounter;               // keep track of time for next pulse

	      if(secondBeat){                        // if this is the second beat, if secondBeat == TRUE
	        secondBeat = false;                  // clear secondBeat flag
	        for(int i=0; i<=9; i++){             // seed the running total to get a realisitic BPM at startup
	          rate[i] = IBI;
	        }
	      }

	      if(firstBeat){                         // if it's the first time we found a beat, if firstBeat == TRUE
	        firstBeat = false;                   // clear firstBeat flag
	        secondBeat = true;                   // set the second beat flag
	        //sei();                               // enable interrupts again
	        //return;                              // IBI value is unreliable so discard it
	      }


	      // keep a running total of the last 10 IBI values
	      int runningTotal = 0;                  // clear the runningTotal variable

	      for(int i=0; i<=8; i++){                // shift data in the rate array
	        rate[i] = rate[i+1];                  // and drop the oldest IBI value
	        runningTotal += rate[i];              // add up the 9 oldest IBI values
	      }

	      rate[9] = IBI;                          // add the latest IBI to the rate array
	      runningTotal += rate[9];                // add the latest IBI to runningTotal
	      runningTotal /= 10;                     // average the last 10 IBI values
	      BPM = 60000/runningTotal;               // how many beats can fit into a minute? that's BPM!
	      return BPM;
	      QS = true;
	      *status=1;// set Quantified Self flag
	      // QS FLAG IS NOT CLEARED INSIDE THIS ISR
	    }
	  }

	  if (Signal < thresh && Pulse == true){   // when the values are going down, the beat is over
	    //digitalWrite(blinkPin,LOW);            // turn off pin 13 LED
	    Pulse = false;                         // reset the Pulse flag so we can do it again
	    amp = P - T;                           // get amplitude of the pulse wave
	    thresh = amp/2 + T;                    // set thresh at 50% of the amplitude
	    P = thresh;                            // reset these for next time
	    T = thresh;
	    *thrsh=thresh;
	    *pl=Pulse;
	    *status=2;
	  }

	  if (N > 2500){                           // if 2.5 seconds go by without a beat
	    thresh = 712;//512                          // set thresh default
	    P = 712;                               // set P default
	    T = 712;                               // set T default
	    lastBeatTime = sampleCounter;          // bring the lastBeatTime up to date
	    firstBeat = true;                      // set these to avoid noise
	    secondBeat = false;
	    *status=3;// when we get the heartbeat back
	  }

	  //sei();                                   // enable interrupts when youre done!
}

/** @} */
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void TestThread(void *p) {//500-530 normal value, 1000 - heart beat value
	int curtime = osalOsGetSystemTimeX();
	static int delay;

	//parameters for ADC
	//Reference: adc_IId.h (Search: ADCConversionGroup) and
	//stm32l152xb.h (Search: Bit definition for ADC_CR1 register)
		static const ADCConversionGroup convgrp = {
	        0,
	        1,
	        NULL,
	        NULL,

	        // CR
	        //0,
			ADC_CR1_RES_0,//set control register 1 in ADC to 10 bit resolution
			ADC_CR2_SWSTART | ADC_CR2_DELS_0,

	        // SMPR
	        0,
	        0,
	        ADC_SMPR3_SMP_AN0(ADC_SAMPLE_16),

	        // SQR
	        ADC_SQR1_NUM_CH(1),
	        0,
	        0,
	        0,
	        ADC_SQR5_SQ1_N(ADC_CHANNEL_IN1)//set ADC as pin PA1 (IN1) (HAS BEEN PULLED DOWN IN BOARD.H)
	    };
	  int adc_oversample()
	    	  {
	    	      int sum = 0;
	    	      // Oversample by 256 and divide by 16 to get 4 more bits of accuracy.
	    	      for (int i = 0; i < 16; i++)
	    	      {
	    	          adcsample_t buf[16];

	    	          adcAcquireBus(&ADCD1);
	    	          adcConvert(&ADCD1, &convgrp, buf, 16);
	    	          adcReleaseBus(&ADCD1);

	    	         /* for (int j = 0; j < 16; j++)
	    	          {
	    	              sum += buf[j];
	    	          }*/
	    	          sum = buf[0];
	    	      }

	    	      return sum;
	    	      //return (sum + 8) / 16;
	    	  }
	    int val = adc_oversample();


	    int delaytime = ST2MS(delay);//system ticks to ms

  chp = p;
  //int a=1;
  //return val;
int tempp=TestThread2()*10000;
  //test_println("");
  //test_println("*** ChibiOS/RT test suite");
 /* test_printn(val);
  test_print("--");*/
  chThdSleepMilliseconds(100);
 // test_printn(delaytime);
//  test_print("--");
 // test_printn(heart);
 // test_print("--");
  test_printn(tempp);
  //test_printn(intervalN);
  //test_print("--");

    //test_printn(status);
    test_println("--");

   //     test_printn(thrsh);
        //test_print("--");

            //test_printn(pl);*/

  const int sensorMin = 0;      // sensor minimum, discovered through experiment
  const int sensorMax = 1024;    // sensor maximum, discovered through experiment

    int sensorReading = val;
    // map the sensor range to a range of 12 options:
    int range = map(sensorReading, sensorMin, sensorMax, 0, 11);

    // do something different depending on the
    // range value:
   /* switch (range) {
    case 0:
      test_println("");     /////ASCII Art Madness
      break;
    case 1:
    	test_println("---");
      break;
    case 2:
    	test_println("------");
      break;
    case 3:
    	test_println("---------");
      break;
    case 4:
    	test_println("------------");
      break;
    case 5:
    	test_println("--------------|-");
      break;
    case 6:
    	test_println("--------------|---");
      break;
    case 7:
    	test_println("--------------|-------");
      break;
    case 8:
    	test_println("--------------|----------");
      break;
    case 9:
    	test_println("--------------|----------------");
      break;
    case 10:
    	test_println("--------------|-------------------");
      break;
    case 11:
    	test_println("--------------|-----------------------");
      break;

    }
*/


  //QS=false;

  heart = heartbeat(val,&intervalN,&status,&peak,&trough,&thrsh,&pl);// input adc and pointer (to store interval b/w heart beats)

  int pastime = osalOsGetSystemTimeX();
  delay = pastime - curtime;
}

float TestThread2(){//LM35 adc //void *p
	palClearPad(GPIOC,GPIOC_PIN0);
	static const ADCConversionGroup convgrp = {
		        0,
		        1,
		        NULL,
		        NULL,

		        // CR
		        0,
				//ADC_CR1_RES_0,//set control register 1 in ADC to 10 bit resolution
				ADC_CR2_SWSTART | ADC_CR2_DELS_0,

		        // SMPR
		        0,
		        0,
		        ADC_SMPR3_SMP_AN0(ADC_SAMPLE_16),

		        // SQR
		        ADC_SQR1_NUM_CH(1),
		        0,
		        0,
		        0,
		        ADC_SQR5_SQ1_N(ADC_CHANNEL_IN10)//set ADC as pin PA2 (IN2) (HAS BEEN PULLED DOWN IN BOARD.H)
		    };
		  int adc_oversample()
		    	  {
		    	      int sum = 0;
		    	      // Oversample by 256 and divide by 16 to get 4 more bits of accuracy.
		    	      for (int i = 0; i < 16; i++)
		    	      {
		    	          adcsample_t buf[16];

		    	          adcAcquireBus(&ADCD1);
		    	          adcConvert(&ADCD1, &convgrp, buf, 16);
		    	          adcReleaseBus(&ADCD1);

		    	         /* for (int j = 0; j < 16; j++)
		    	          {
		    	              sum += buf[j];
		    	          }*/
		    	          sum = buf[0];
		    	      }

		    	      return sum;
		    	      //return (sum + 8) / 16;
		    	  }
		    float val2 = adc_oversample();
		    float volt = (val2*3.0)/4096.0;

		    //double temp = (val2*300)/1024;
int delay=osalOsGetSystemTimeX();
//osalInit
		    int delaytime = ST2MS(delay);//system ticks to ms

	 // chp = p;
	  //int a=1;
	  //return val;

	 // test_println("");

	  //test_printn(temp);
	  //chThdSleepMilliseconds(100);
//return temp;
return volt;
}








